FoamFile {
    version 2.0;
    format ascii;
    class dictionary;
    object fvSchemes;
}
ddtSchemes {
    default steadyState;
}
gradSchemes {
    default cellLimited leastSquares 1;
    grad(U) cellLimited leastSquares 1;
    grad(p_rgh) cellLimited leastSquares 1;
    grad(rho) cellLimited leastSquares 1;
    grad(h) cellLimited leastSquares 1;
    grad(e) cellLimited leastSquares 1;
    grad(k) cellLimited leastSquares 1;
    grad(omega) cellLimited leastSquares 1;
}
divSchemes {
    default Gauss linear;
    div(phi,U) bounded Gauss upwind;
    div(phi,K) bounded Gauss upwind;
    div(phi,h) bounded Gauss upwind;
    div(phi,e) bounded Gauss upwind;
    div(phiv,p) bounded Gauss upwind;
    div(phi,k) bounded Gauss upwind;
    div((muEff*dev2(T(grad(U))))) Gauss linear;
    div(phi,omega) bounded Gauss upwind;
}
laplacianSchemes {
    default Gauss linear limited corrected 0.33;
    laplacian(DkEff,k) Gauss linear limited corrected 0.33;
    laplacian(alphaEff,h) Gauss linear limited corrected 0.33;
    laplacian(alpha,h) Gauss linear limited corrected 0.33;
    laplacian(muEff,U) Gauss linear limited corrected 0.33;
    laplacian(alphaEff,e) Gauss linear limited corrected 0.33;
    laplacian(rhorAUf,p_rgh) Gauss linear limited corrected 0.33;
    laplacian(DomegaEff,omega) Gauss linear limited corrected 0.33;
}
interpolationSchemes {
    default linear;
    interpolate(kappa) linear;
    interpolate(rho) linear;
    interpolate((thermo:rho*Cp)) linear;
    interpolate(mag(Kappa)) linear;
    interpolate((rho*HbyA)) linear;
    interpolate((rho_0*U_0)) linear;
    interpolate(grad(h)) linear;
    interpolate((rho*rAU)) linear;
}
snGradSchemes {
    default limited 0.5;
    snGrad(rho) limited 0.5;
    snGrad(p_rgh) limited 0.5;
}
fluxRequired {
    default no;
    p_rgh ;
}
